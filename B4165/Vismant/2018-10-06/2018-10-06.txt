from math import sqrt
from itertools import count, islice
from abc import ABCMeta, abstractmethod


def is_prime(num):
    if num < 2:
        return False
    for number in islice(count(2), int(sqrt(num) - 1)):
        if not num % number:
            return False
    return True


class Cell:
    def __init__(self, column, line):
        self.column = column
        self.line = line
        self.colour = "Black"
        self.cell_colour()

    def cell_colour(self):
        if is_prime(self.column + self.line):  # if sum of column num and line num gives a prime number
            self.colour = "White"  # that cell is white
        elif self.line == self.column:
            self.colour = "Black"  # but if column num and line num is equal, cell is black

    def __str__(self):
        return '%s : %s is %s' % (self.column, self.line, self.colour)

    def __eq__(self, other_cell):
        if self.colour == other_cell.colour:
            return True
        else:
            return False

    def __ne__(self, other_cell):
        if self.colour != other_cell.colour:
            return True
        else:
            return False


class Figure(Cell):
    def __str__(self):
        return '%s on a %s : %s (%s cell)' % (
            self.__class__.__name__, self.column, self.line, self.colour)

    def can_move_horizontal(self, cell):
        if self.line == cell.line:
            return True
        else:
            return False

    def can_move_vertical(self, cell):
        if self.column == cell.column:
            return True
        else:
            return False

    def can_move_to(self, cell):
        raise NotImplementedError("You must override this method!")


class Rook(Figure):
    def can_move_to(self, cell):
        if Figure.can_move_vertical(self, cell) or Figure.can_move_horizontal(self, cell):
            return True
        else:
            return False


if __name__ == "__main__":
    menu_choose = int(
        input("Press 1 to test cell colour checker. And press 2 to test figure movement to cell possibility checker: "))
    if menu_choose == 1:
        column1 = int(input("First cell column: "))
        line1 = int(input("First cell line: "))
        column2 = int(input("Second cell column: "))
        line2 = int(input("Second sell line: "))

        cell1 = Cell(column1, line1)
        cell2 = Cell(column2, line2)

        cell1.cell_colour()
        cell2.cell_colour()

        print(cell1)
        print(cell2)

        if cell1 == cell2:
            print('Yes!')
        else:
            print("NO!")

    if menu_choose == 2:
        while True:
            figure_choose = input("Figure name (type 'figures' to see all available figures): ")
            if figure_choose == "figures":
                print('Rook')
                continue
            if figure_choose == "Rook" or figure_choose == "rook":

                rook1_column = int(input("Rook column: "))
                rook1_line = int(input("Rook line: "))
                column3 = int(input("Cell column for movement possibility checker: "))
                line3 = int(input("Cell line for movement possibility checker: "))

                rook1 = Rook(rook1_column, rook1_line)
                print(rook1)
                cell3 = Cell(column3, line3)
                print(cell3)

                if rook1.can_move_to(cell3):
                    print("YES!")
                else:
                    print("NO!")
                    
